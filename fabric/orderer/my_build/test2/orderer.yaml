# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
################################################################################
#
#   Orderer Configuration
#
#   - This controls the type and configuration of the orderer.
#
################################################################################
General:

    # Ledger Type: The ledger type to provide to the orderer.
    # Two non-production ledger types are provided for test purposes only:
    #  - ram: An in-memory ledger whose contents are lost on restart.
    #  - json: A simple file ledger that writes blocks to disk in JSON format.
    # Only one production ledger type is provided:
    #  - file: A production file-based ledger.
    LedgerType: file

    # Listen address: The IP on which to bind to listen.
    ListenAddress: 127.0.0.1

    # Listen port: The port on which to bind to listen.
    ListenPort: 8050

    # TLS: TLS settings for the GRPC server.
    TLS:
        Enabled: false
        PrivateKey: tls/server.key
        Certificate: tls/server.crt
        RootCAs:
          - tls/ca.crt
        ClientAuthEnabled: false
        ClientRootCAs:

    # Log Level: The level at which to log. This accepts logging specifications
    # per: fabric/docs/Setup/logging-control.md
    LogLevel: debug

    # Log Format:  The format string to use when logging.  Especially useful to disable color logging
    LogFormat: '%{color} %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'

    # Genesis method: The method by which the genesis block for the orderer
    # system channel is specified. Available options are provisional, file:
    #  - provisional: Utilizes a genesis profile, specified by GenesisProfile,
    #                 to dynamically generate a new genesis block.
    #  - file: Uses the file provided by GenesisFile as the genesis block.
    GenesisMethod: provisional

    # Genesis profile: The profile to use to dynamically generate the genesis
    # block to use when initializing the orderer system channel and
    # GenesisMethod is set to provisional. See the configtx.yaml file for the
    # descriptions of the available profiles. Ignored if GenesisMethod is set to
    # file.
    GenesisProfile: TestingHoneyBadgerBFT

    # Genesis file: The file containing the genesis block to use when
    # initializing the orderer system channel and GenesisMethod is set to
    # file. Ignored if GenesisMethod is set to provisional.
    GenesisFile: genesisblock

    # LocalMSPDir is where to find the private crypto material needed by the
    # orderer. It is set relative here as a default for dev environments but
    # should be changed to the real location in production.
    LocalMSPDir: msp

    # LocalMSPID is the identity to register the local MSP material with the MSP
    # manager. IMPORTANT: The local MSP ID of an orderer needs to match the MSP
    # ID of one of the organizations defined in the orderer system channel's
    # /Channel/Orderer configuration. The sample organization defined in the
    # sample configuration provided has an MSP ID of DEFAULT.
    LocalMSPID: DEFAULT

    # Enable an HTTP service for Go pprof profiling as documented at:
    # https://golang.org/pkg/net/http/pprof
    Profile:
        Enabled: false
        Address: 0.0.0.0:6060

    # BCCSP configures the blockchain crypto service providers.
    BCCSP:
        # Default specifies the preferred blockchain crypto service provider
        # to use. If the preferred provider is not available, the software
        # based provider (SW) will be used.
        # Valid providers are:
        #  - SW: a software based crypto provider
        #  - PKCS11: a CA hardware security module crypto provider.
        Default: SW

        # SW configures the software based blockchain crypto provider.
        SW:
            # TODO: The default Hash and Security level needs refactoring to be
            # fully configurable. Changing these defaults requires coordination
            # SHA2 is hardcoded in several places, not only BCCSP
            Hash: SHA2
            Security: 256
            # Location of key store. If this is unset, a location will be
            # chosen using: 'LocalMSPDir'/keystore
            FileKeyStore:
                KeyStore:

################################################################################
#
#   SECTION: File Ledger
#
#   - This section applies to the configuration of the file or json ledgers.
#
################################################################################
FileLedger:

    # Location: The directory to store the blocks in.
    # NOTE: If this is unset, a new temporary location will be chosen every time
    # the orderer is restarted, using the prefix specified by Prefix.
    Location: ./production/orderer

    # The prefix to use when generating a ledger directory in temporary space.
    # Otherwise, this value is ignored.
    Prefix: hyperledger-fabric-ordererledger

################################################################################
#
#   SECTION: RAM Ledger
#
#   - This section applies to the configuration of the RAM ledger.
#
################################################################################
RAMLedger:

    # History Size: The number of blocks that the RAM ledger is set to retain.
    # WARNING: Appending a block to the ledger might cause the oldest block in
    # the ledger to be dropped in order to limit the number total number blocks
    # to HistorySize. For example, if history size is 10, when appending block
    # 10, block 0 (the genesis block!) will be dropped to make room for block 10.
    HistorySize: 1000

################################################################################
#
#   SECTION: Kafka
#
#   - This section applies to the configuration of the Kafka-based orderer, and
#     its interaction with the Kafka cluster.
#
################################################################################
Kafka:

    # Retry: What do if a connection to the Kafka cluster cannot be established,
    # or if a metadata request to the Kafka cluster needs to be repeated.
    Retry:
        # When a new channel is created, or when an existing channel is reloaded
        # (in case of a just-restarted orderer), the orderer interacts with the
        # Kafka cluster in the following ways:
        # 1. It creates a Kafka producer (writer) for the Kafka partition that
        # corresponds to the channel.
        # 2. It uses that producer to post a no-op CONNECT message to that
        # partition
        # 3. It creates a Kafka consumer (reader) for that partition.
        # If any of these steps fail, they will be re-attempted every
        # <ShortInterval> for a total of <ShortTotal>, and then every
        # <LongInterval> for a total of <LongTotal> until they succeed.
        # Note that the orderer will be unable to write to or read from a
        # channel until all of the steps above have been completed successfully.
        ShortInterval: 5s
        ShortTotal: 10m
        LongInterval: 5m
        LongTotal: 12h
        # Affects the socket timeouts when waiting for an initial connection, a
        # response, or a transmission. See Config.Net for more info:
        # https://godoc.org/github.com/Shopify/sarama#Config
        NetworkTimeouts:
            DialTimeout: 10s
            ReadTimeout: 10s
            WriteTimeout: 10s
        # Affects the metadata requests when the Kafka cluster is in the middle
        # of a leader election.See Config.Metadata for more info:
        # https://godoc.org/github.com/Shopify/sarama#Config
        Metadata:
            RetryBackoff: 250ms
            RetryMax: 3
        # What to do if posting a message to the Kafka cluster fails. See
        # Config.Producer for more info:
        # https://godoc.org/github.com/Shopify/sarama#Config
        Producer:
            RetryBackoff: 100ms
            RetryMax: 3
        # What to do if reading from the Kafka cluster fails. See
        # Config.Consumer for more info:
        # https://godoc.org/github.com/Shopify/sarama#Config
        Consumer:
            RetryBackoff: 2s

    # Verbose: Enable logging for interactions with the Kafka cluster.
    Verbose: false

    # TLS: TLS settings for the orderer's connection to the Kafka cluster.
    TLS:

      # Enabled: Use TLS when connecting to the Kafka cluster.
      Enabled: false

      # PrivateKey: PEM-encoded private key the orderer will use for
      # authentication.
      PrivateKey:
        # As an alternative to specifying the PrivateKey here, uncomment the
        # following File key and specify the file name from which to load the
        # value of PrivateKey.
        #File: path/to/PrivateKey

      # Certificate: PEM-encoded signed public key certificate the orderer will
      # use for authentication.
      Certificate:
        # As an alternative to specifying the Certificate here, uncomment the
        # following File key and specify the file name from which to load the
        # value of Certificate.
        #File: path/to/Certificate

      # RootCAs: PEM-encoded trusted root certificates used to validate
      # certificates from the Kafka cluster.
      RootCAs:
        # As an alternative to specifying the RootCAs here, uncomment the
        # following File key and specify the file name from which to load the
        # value of RootCAs.
        #File: path/to/RootCAs

    # Kafka version of the Kafka cluster brokers (defaults to 0.9.0.1)
    Version:

################################################################################
#
#   SECTION: HoneybadgerBFT
#
#   - This section applies to the configuration of the HoneybadgerBFT orderer.
#
################################################################################
HoneybadgerBFT:

    Total: 4
    Tolerance: 1
    ProposalSize: 1 # B/N in paper

    Index: 1
    ConnectionList:
        - 127.0.0.1:6666
        - 127.0.0.1:8666
        - 127.0.0.1:8866
        - 127.0.0.1:8886

    # Paramenter & Generator & PublicKey & VerificationKeys ought to be written in genesis block
    # Element [x, y] is treated as an array in yaml, there is no solution
    # Must use quotation marks, otherwise strings will be treated as float64

    ThresholdEncryptionParamenter: 
        - "type a"
        - "q 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791"
        - "h 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776"
        - "r 730750818665451621361119245571504901405976559617"
        - "exp2 159"
        - "exp1 107"
        - "sign1 1"
        - "sign0 1"
    ThresholdEncryptionGenerator: "[4264083391895955901265257040028479149400169025615345260303986214726423231173928285256791041998919055277112394516001733341992693480052725918957267301183325, 2116426609166886503385333553365957364401816544109920990955286798122869276384003469957105697651246200288946800075692216092350705727159751274607530017817646]"
    ThresholdEncryptionPublicKey: "[1383131295678294937533189596119034051033883340512539891644426442175260038480302438671732566345878635731642189539365955369633446847841636789058382982053502, 7533922065946137511328976798221736089581367800454322256375220469848223365010523746117503811178043909707519718759233617936635800576558420346245591048193075]"
    ThresholdEncryptionVerificationKeys:
        - "[6013224635215800212297496211234478555979624957752286354794079588074747115565110404738021458542329070018944189197301767852212720412531844522567028567058248, 6297459557456572786124958116349434066264270862888262785432197713844659078902553844854391076361045010718656815774976066192115028958842429262385137693704423]"
        - "[6787615133468041139629478087307159272809161196479041689786240361393481720026490546167886471385503974314068697071781995748618067113602704206168343200499155, 5153417067542361470483959267152868307044977427871551114470306954655859770880942067137674261220534191197797250539483401940676998972476475346262365403767577]"
        - "[4463764610751410892658431882534088832261297746749014359728677628311927199603317398162271079310783154100806959054026899447771847379198529653704532468345309, 2305373174793558270376239691003839438242979868253419509795112372403096184306159304944521916739285723061658561799678146571359674273240428755424577065767669]"
        - "[2052723724579476599053962794358517244265004101805147184190789762024835816784930943116012988812554387335161658692391949545151151744205029280998226156513618, 3424965058585618431717944326015847520149861875853429186629191885764089094954647032938676679748470445635351407560247808361620355785187956165948438546630548]"
    ThresholdEncryptionPrivateKey: "345686133016528240439235014991915338062419158388"


    ThresholdSignatureParamenter: 
        - "type a"
        - "q 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791"
        - "h 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776"
        - "r 730750818665451621361119245571504901405976559617"
        - "exp2 159"
        - "exp1 107"
        - "sign1 1"
        - "sign0 1"
    ThresholdSignatureGenerator: "[4264083391895955901265257040028479149400169025615345260303986214726423231173928285256791041998919055277112394516001733341992693480052725918957267301183325, 2116426609166886503385333553365957364401816544109920990955286798122869276384003469957105697651246200288946800075692216092350705727159751274607530017817646]"
    ThresholdSignaturePublicKey: "[1383131295678294937533189596119034051033883340512539891644426442175260038480302438671732566345878635731642189539365955369633446847841636789058382982053502, 7533922065946137511328976798221736089581367800454322256375220469848223365010523746117503811178043909707519718759233617936635800576558420346245591048193075]"
    ThresholdSignatureVerificationKeys:
        - "[6013224635215800212297496211234478555979624957752286354794079588074747115565110404738021458542329070018944189197301767852212720412531844522567028567058248, 6297459557456572786124958116349434066264270862888262785432197713844659078902553844854391076361045010718656815774976066192115028958842429262385137693704423]"
        - "[6787615133468041139629478087307159272809161196479041689786240361393481720026490546167886471385503974314068697071781995748618067113602704206168343200499155, 5153417067542361470483959267152868307044977427871551114470306954655859770880942067137674261220534191197797250539483401940676998972476475346262365403767577]"
        - "[4463764610751410892658431882534088832261297746749014359728677628311927199603317398162271079310783154100806959054026899447771847379198529653704532468345309, 2305373174793558270376239691003839438242979868253419509795112372403096184306159304944521916739285723061658561799678146571359674273240428755424577065767669]"
        - "[2052723724579476599053962794358517244265004101805147184190789762024835816784930943116012988812554387335161658692391949545151151744205029280998226156513618, 3424965058585618431717944326015847520149861875853429186629191885764089094954647032938676679748470445635351407560247808361620355785187956165948438546630548]"
    ThresholdSignaturePrivateKey: "345686133016528240439235014991915338062419158388"
    
